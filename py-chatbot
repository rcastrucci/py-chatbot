#!/usr/bin/env python3
# coding: utf-8

from platform   import system as system_name
from subprocess import call   as system_call
import json
import os.path
import random


def clearScreen():
    command = 'cls' if system_name().lower()=='windows' else 'clear'
    system_call([command])


def isJsonFile(filename):
    with open(filename, "r") as file:
        try:
            json.load(file)
            return True
        except ValueError:
            return False

 
def checkFiles(listOfFiles):
    for file in listOfFiles:
        if os.path.exists(file):
            if isJsonFile(file):
                continue
            else:
                print("Resource files are not in json format ({})".format(file))
                return False
        else:
            print("Resource file not found ({})".format(file))
            return False
    return True


def openJson(filename):
    with open(filename) as file:
        return json.load(file)


def loadIntents(INTENTS):
    listOfIntents = []
    for intents in INTENTS:
        listOfIntents.append(intents['tag'])
    return listOfIntents


def loadIntentsPatterns(INTENTS):
    listOfIntentsPatterns = []
    for intents in INTENTS:
        for patterns in intents['patterns']:
            listOfIntentsPatterns.append((intents['tag'], patterns))
    return listOfIntentsPatterns


def loadIntentsResponses(INTENTS):
    listOfIntentsResponses = []
    for intents in INTENTS:
        for responses in intents['responses']:
            listOfIntentsResponses.append((intents['tag'], responses))
    return listOfIntentsResponses


def loadEntities(ENTITIES):
    listOfEntities = []
    for entities in ENTITIES:
        for ent in entities:
            listOfEntities.append(ent)
    return listOfEntities


def loadEntitiesValues(ENTITIES):
    listOfEntitiesValues = []
    for i in range(len(ENTITIES)):
        for entity in ENTITIES[i]:
            for value in ENTITIES[i][entity]:
                listOfEntitiesValues.append((entity, value['value']))
    return listOfEntitiesValues


def loadEntitiesSynonymous(ENTITIES):
    listOfEntitiesSynonymous = []
    for i in range(len(ENTITIES)):
        for entity in ENTITIES[i]:
            for value in ENTITIES[i][entity]:
                for synonymous in value['synonymous']:
                    listOfEntitiesSynonymous.append((value['value'], synonymous))
    return listOfEntitiesSynonymous


def search(sentence, tuplesList):
    percentagePredicted = []
    for i in range(len(tuplesList)):
        sentencePercentagePredicted = 0
        wordPercentagePredicted = 0

        ''' SEARCH INITIALY ON ENTIRE SENTENCE '''
        if (sentence.lower() in tuplesList[i][1].lower() or tuplesList[i][1].lower() in sentence.lower()):
            tupleSize = len(tuplesList[i][1])
            sentenceSize = len(sentence)

            if tupleSize > sentenceSize:
                sentencePercentagePredicted = (sentenceSize * 100)/tupleSize
            else:
                sentencePercentagePredicted = (tupleSize * 100)/sentenceSize

            ''' print("Found Sentence -> {} in tuple -> {} with percentage -> {}".format(sentence.lower(), tuplesList[i][1].lower(), sentencePercentagePredicted)) '''


        ''' BREAK SENTENCE INTO WORDS AND SEARCH WORD BY WORD IN A TUPLE '''
        tupleBroken = tuplesList[i][1].lower().split()
        sentenceBroken = sentence.lower().split()
        amountFound = 0
        for x in range(len(sentenceBroken)):
            userWord = sentenceBroken[x]
            botSentence = tuplesList[i][1].lower()

            if len(userWord) > 1:
                if userWord in botSentence:
                    amountFound += (len(userWord*100)/len(botSentence))
        if amountFound == 0:
            for y in range(len(tupleBroken)):
                botWord = tupleBroken[y]
                userSentence = sentence.lower()
                
                if len(botWord) > 1:
                    if botWord in userSentence:
                        amountFound += (len(botWord)*100)/len(userSentence)
        if amountFound > 0:
            tupleWords = len(tupleBroken)
            sentenceWords = len(sentenceBroken)

            if tupleWords > sentenceWords:
                wordPercentagePredicted = amountFound/tupleWords
            else:
                wordPercentagePredicted = amountFound/sentenceWords
            
            ''' print("Found Word -> {} in tuple -> {} with percentage -> {}".format(sentenceBroken[x], tuplesList[i][1].lower(), wordPercentagePredicted)) '''

        ''' THE HIGHEST SCORE OF PREDICTION RETURN PERCENTAGE IN A TUPLE WITH ITS CORRESPONDENT INTENT '''
        if sentencePercentagePredicted > wordPercentagePredicted:
            percentagePredicted.append((tuplesList[i][0], sentencePercentagePredicted))
        else:
            if wordPercentagePredicted > 0:
                percentagePredicted.append((tuplesList[i][0], wordPercentagePredicted))

    if len(percentagePredicted) > 0:
        return sorted(percentagePredicted)
    else:    
        return False


def pickAnswer(tag, answers, randomic=True):
    listOfAnswers = []
    for ans in answers:
        if ans[0] == tag:
            listOfAnswers.append(ans[1])
    if randomic:
        return random.choice(listOfAnswers)
    else:
        sequence = "\n".join(listOfAnswers)
        return sequence


def pickQuestion(tag, question, randomic=True):
    listOfQuestions = []
    for ques in question:
        if ques[0] == tag:
            listOfQuestions.append(ques[1])
    if randomic:
        return random.choice(listOfQuestions)
    else:
        sequence = "\n".join(listOfQuestions)
        return sequence


intentsFile = ".intents.json"
entitiesFile = ".entities.json"

if checkFiles([intentsFile, entitiesFile]):
    ''' INTENTS '''
    INTENTS = openJson(intentsFile)['intents']
    intentsList = loadIntents(INTENTS)
    intentsPatterns = loadIntentsPatterns(INTENTS)
    intentsResponses = loadIntentsResponses(INTENTS)
    ''' ENTITIES '''
    ENTITIES = openJson(entitiesFile)['entities']
    entitiesList = loadEntities(ENTITIES)
    entitiesValues = loadEntitiesValues(ENTITIES)
    entitiesSynonymous = loadEntitiesSynonymous(ENTITIES)
    

    class predict:
        def sentence(entireSentence):
            if len(entireSentence) > 1:
                searchIntents = search(entireSentence, intentsPatterns)
                if searchIntents:
                    return searchIntents
                else:
                    return False
            else:
                return False

        def intent(word):
            if len(word) > 1:
                hardValue = search(word, intentsPatterns)
                if hardValue:
                    return hardValue
                else:
                    return False
            else:
                return False

        def entity(word):
            if len(word) > 1:
                hardValue = search(word, entitiesValues)
                synonymousValue = search(word, entitiesSynonymous)
                if hardValue:
                    return hardValue
                else:
                    if synonymousValue:
                        return search(synonymousValue[0], entitiesValues)
                    else:
                        return False
            else:
                return False

    class chat:
        def answer(tag):
            print("\nPy-chatbot: {}\n".format(pickAnswer(tag, intentsResponses)))

        def read(query):
            queryIntent = predict.sentence(query)
            if queryIntent:
                queryIntent = sorted(queryIntent, key=lambda x: x[1], reverse=True)
                ''' print(queryIntent) '''
                if queryIntent[0][1] > 3.00:
                    chat.answer(queryIntent[0][0])
                else:
                    print("\nI am not sure, did you mean?\n{}\n".format(pickQuestion(queryIntent[0][0], intentsPatterns)))
            else:
                print("\nI didn't understand, please can you try again?\n")

        def getName():
            while True:
                userName = input("\nType your name to enter a chat: ")
                if len(userName.replace(' ', '')) > 0:
                    name = userName.split()
                    return " ".join(name).capitalize()

        def start():
            ''' userName = chat.getName() '''
            userName = 'You'
            clearScreen()
            print("Welcome to Py-Chatbot {}! To close this chat type 'quit'\n\n".format(userName))
            while True:
                query = input("{}: ".format(userName))
                if (query == "quit" or query == "exit"):
                    break
                else:
                    chat.read(query)
    
    chat.start()